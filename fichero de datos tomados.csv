#include <stdio.h>
#include <stdlib.h>



double maximo(double x[], int n);
double minimo(double x[], int n);
double promedio(double x[], int n);



int main()
{
  FILE *pf, *wf;
  int i, N;
  char c;
  // Defino un vector para cada variable a leer del fichero
  double *TempAvg, *HumidAvg ;
  double minTa, minH ;
  double maxTa, maxH ;
  double promTa, promH;



  pf = fopen("datos tomados por sensores.csv", "r");
  if (pf == NULL)
    {
      printf("Error al abrir el fichero");
      return -1;
    }
  else
    {
      //Contamos el número de líneas
      while(fscanf(pf, "%c", &c) != EOF)
            if(c == '\n')
                N++;
      //Volvemos a la posición inicial del fichero
      fseek(pf, 0, SEEK_SET);



      //Reservamos memoria para cada puntero
      TempAvg = malloc(sizeof(double) * N);
      HumidAvg = malloc(sizeof(double) * N);




      if (TempAvg == NULL || HumidAvg == NULL )
    {
      printf("Error de memoria.\n");
      exit(-1);
    }



      // Leemos el fichero línea a línea
      for (i = 0; i < N; i++)
    { // El formato es de números separados por comas
      fscanf(pf, "%lf,%lf",
         &TempAvg[i],
         &HumidAvg[i]);
    }
      // Cerramos el fichero
      fclose(pf);
      // Calcula el minimo, maximo y promedio usando las funciones
      minTa = minimo(TempAvg, N);
      maxTa = maximo(TempAvg, N);
      promTa = promedio(TempAvg, N);



      minH = minimo(HumidAvg, N);
      maxH = maximo(HumidAvg, N);
      promH = promedio(HumidAvg, N);




      // Mostramos resultados
      printf("Variable: \t Min \t Max \t Prom \n");
      printf("Temp: \t %lf \t %lf \t %lf \n",
         minTa, maxTa, promTa);
      printf("Humedad: \t %lf \t %lf \t %lf \n",
         minH, maxH, promH);




      // Escribimos fichero
      wf = fopen("resumen.txt", "w");



      fprintf(wf, "Variable: \t Min \t Max \t Prom \n");
      fprintf(wf, "Temp: \t %lf \t %lf \t %lf \n",
         minTa, maxTa, promTa);
      fprintf(wf, "Humedad: \t %lf \t %lf \t %lf \n",
         minH, maxH, promH);



      fclose(wf);



      return 0;
    }
}



double maximo(double x[], int n)
{
  int i;
  double mx = x[0]; //El maximo inicial es el primer elemento
  // Busca en el vector algún valor mayor
  for (i = 1; i < n; i++)
    if (x[i] > mx) mx = x[i]; // y lo sustituye si lo encuentra
  return mx;
}



double minimo(double x[], int n)
{
  int i;
  double mn = x[0];



  for (i = 1; i < n; i++)
    if (x[i] < mn) mn = x[i];
  return mn;
}



double promedio(double x[], int n)
{
  int i;
  double media = 0.0;



  for (i = 0; i < n; i++)
    media += x[i];
  return media / n;
}
